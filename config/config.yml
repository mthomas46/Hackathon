# =============================================================================
# UNIFIED PROJECT CONFIGURATION
# =============================================================================
# This is the single source of truth for the LLM Documentation Ecosystem
# All services inherit from this configuration
#
# Environment variables can override any value using ${VAR_NAME:-default} syntax
# Service-specific configs in services/*/config.yaml can override these defaults
# =============================================================================

# ============================================================================
# PROJECT METADATA
# ============================================================================
project:
  name: "LLM Documentation Ecosystem"
  version: "1.0.0"
  description: "Comprehensive documentation analysis and consistency platform"
  environment: ${ENVIRONMENT:-development}

# ============================================================================
# INFRASTRUCTURE CONFIGURATION
# ============================================================================

# Redis Configuration
redis:
  host: ${REDIS_HOST:-redis}
  port: ${REDIS_PORT:-6379}
  url: ${REDIS_URL:-redis://redis:6379}
  # Redis persistence and memory settings
  persistence:
    enabled: true
    appendonly: yes
    maxmemory: "512mb"
    maxmemory_policy: "allkeys-lru"
  # Health check settings
  healthcheck:
    interval: 30s
    timeout: 10s
    retries: 3

# SQLite Database Configuration
sqlite:
  databases:
    # Document Store Database
    doc_store:
      path: ${DOCSTORE_DB:-services/doc_store/db.sqlite3}
      connection_pool_size: ${DOCSTORE_CONNECTION_POOL_SIZE:-5}
      # Auto-initialization settings
      auto_init: true
      backup_enabled: true

    # Prompt Store Database
    prompt_store:
      path: ${PROMPT_STORE_DB:-/app/data/prompt_store.db}
      # Data persistence volumes
      volume: prompt_store_data

  # Global SQLite settings
  settings:
    journal_mode: WAL
    synchronous: NORMAL
    cache_size: -64000  # 64MB cache
    temp_store: memory

# PostgreSQL Configuration (for production)
postgresql:
  enabled: ${USE_POSTGRESQL:-false}
  host: ${POSTGRES_HOST:-postgres}
  port: ${POSTGRES_PORT:-5432}
  database: ${POSTGRES_DB:-doc_consistency}
  user: ${POSTGRES_USER:-doc_user}
  password: ${POSTGRES_PASSWORD:-doc_password}
  # Connection settings
  max_connections: 20
  connection_timeout: 30

# ============================================================================
# SERVICE PORT MAPPINGS
# ============================================================================
ports:
  # Core Services
  orchestrator: 5099
  doc_store: 5087
  analysis_service: 5020
  source_agent: 5000
  frontend: 3000

  # Agent Services
  memory_agent: 5040
  discovery_agent: 5045
  github_mcp: 5072
  notification_service: 5095

  # Utility Services
  prompt_store: 5110
  interpreter: 5120
  cli: 5130
  bedrock_proxy: 7090
  architecture_digitizer: 5105

  # Analysis & Processing
  code_analyzer: 5085
  secure_analyzer: 5070
  summarizer_hub: 5060
  log_collector: 5080

  # Legacy Services (for backward compatibility)
  github_agent: 5000
  jira_agent: 5001
  confluence_agent: 5050
  swagger_agent: 5010
  consistency_engine: 5020
  reporting: 5030

# ============================================================================
# SERVICE URL CONFIGURATION
# ============================================================================
services:
  # Base URLs (constructed from ports above)
  base_url: ${BASE_URL:-http://localhost}

  # Core Service URLs
  orchestrator_url: ${ORCHESTRATOR_URL:-http://orchestrator:5099}
  doc_store_url: ${DOC_STORE_URL:-http://doc_store:5087}
  analysis_service_url: ${ANALYSIS_SERVICE_URL:-http://analysis-service:5020}
  source_agent_url: ${SOURCE_AGENT_URL:-http://source-agent:5000}
  frontend_url: ${FRONTEND_URL:-http://frontend:3000}

  # Agent Service URLs
  memory_agent_url: ${MEMORY_AGENT_URL:-http://memory-agent:5040}
  discovery_agent_url: ${DISCOVERY_AGENT_URL:-http://discovery-agent:5045}
  github_mcp_url: ${GITHUB_MCP_URL:-http://github-mcp:5072}
  notification_service_url: ${NOTIFICATION_SERVICE_URL:-http://notification-service:5095}

  # Utility Service URLs
  prompt_store_url: ${PROMPT_STORE_URL:-http://prompt-store:5110}
  interpreter_url: ${INTERPRETER_URL:-http://interpreter:5120}
  cli_service_url: ${CLI_SERVICE_URL:-http://cli:5130}
  bedrock_proxy_url: ${BEDROCK_PROXY_URL:-http://bedrock-proxy:7090}
  architecture_digitizer_url: ${ARCHITECTURE_DIGITIZER_URL:-http://architecture-digitizer:5105}

  # Analysis & Processing Service URLs
  code_analyzer_url: ${CODE_ANALYZER_URL:-http://code-analyzer:5085}
  secure_analyzer_url: ${SECURE_ANALYZER_URL:-http://secure-analyzer:5070}
  summarizer_hub_url: ${SUMMARIZER_HUB_URL:-http://summarizer-hub:5060}
  log_collector_url: ${LOG_COLLECTOR_URL:-http://log-collector:5080}

# ============================================================================
# EXTERNAL API CONFIGURATIONS
# ============================================================================

# GitHub Integration
github:
  api_base: ${GITHUB_API_BASE:-https://api.github.com}
  token: ${GITHUB_TOKEN:-}
  owner: ${GITHUB_OWNER:-}
  # MCP Settings
  mcp:
    use_official: ${USE_OFFICIAL_GH_MCP:-false}
    base_url: ${OFFICIAL_GH_MCP_BASE_URL:-http://github-mcp-server:8060}

# Jira Integration
jira:
  base_url: ${JIRA_BASE_URL:-https://example.atlassian.net}
  email: ${JIRA_EMAIL:-}
  api_token: ${JIRA_API_TOKEN:-}

# Confluence Integration
confluence:
  base_url: ${CONFLUENCE_BASE_URL:-https://example.atlassian.net/wiki}
  email: ${CONFLUENCE_EMAIL:-}
  api_token: ${CONFLUENCE_API_TOKEN:-}

# AWS Configuration (for Bedrock)
aws:
  access_key_id: ${AWS_ACCESS_KEY_ID:-}
  secret_access_key: ${AWS_SECRET_ACCESS_KEY:-}
  session_token: ${AWS_SESSION_TOKEN:-}
  region: ${AWS_REGION:-us-east-1}

# ============================================================================
# AI PROVIDER CONFIGURATIONS
# ============================================================================

# Ollama Configuration
ollama:
  host: ${OLLAMA_HOST:-http://host.docker.internal:11434}
  model: ${OLLAMA_MODEL:-llama3}
  endpoint: ${OLLAMA_ENDPOINT:-http://ollama-consistency:11434}
  timeout: 60

# OpenAI Configuration
openai:
  api_key: ${OPENAI_API_KEY:-}
  model: ${OPENAI_MODEL:-gpt-4o}
  timeout: 30

# Anthropic Configuration
anthropic:
  api_key: ${ANTHROPIC_API_KEY:-}
  model: ${ANTHROPIC_MODEL:-claude-3.5-sonnet}
  timeout: 30

# AWS Bedrock Configuration
bedrock:
  model: ${BEDROCK_MODEL:-anthropic.claude-3-sonnet-20240229-v1:0}
  endpoint: ${BEDROCK_ENDPOINT:-}
  region: ${BEDROCK_REGION:-us-east-1}
  api_key: ${BEDROCK_API_KEY:-}
  timeout: 60

# ============================================================================
# SERVICE-SPECIFIC CONFIGURATIONS
# ============================================================================

# Analysis Service Configuration
analysis_service:
  port: 5020
  thresholds:
    drift_overlap: ${DRIFT_OVERLAP_THRESHOLD:-0.1}
    critical_score: ${CRITICAL_SCORE:-90}
    high_priority_score: ${HIGH_PRIORITY_SCORE:-80}
    medium_priority_score: ${MEDIUM_PRIORITY_SCORE:-50}
  testing: ${TESTING:-false}

# Memory Agent Configuration
memory_agent:
  port: 5040
  settings:
    max_items: ${MEMORY_MAX_ITEMS:-1000}
    ttl_seconds: ${MEMORY_TTL_SECONDS:-3600}
    environment: ${ENVIRONMENT:-development}

# Document Store Configuration
doc_store:
  port: 5087
  database:
    path: ${DOCSTORE_DB:-services/doc_store/db.sqlite3}
    connection_pool_size: ${DOCSTORE_CONNECTION_POOL_SIZE:-5}

# Code Analyzer Configuration
code_analyzer:
  port: 5085
  settings:
    rate_limit_enabled: ${RATE_LIMIT_ENABLED:-false}

# Secure Analyzer Configuration
secure_analyzer:
  port: 5070
  circuit_breaker:
    max_failures: ${SECURE_ANALYZER_CIRCUIT_BREAKER_MAX_FAILURES:-5}
    timeout_seconds: ${SECURE_ANALYZER_CIRCUIT_BREAKER_TIMEOUT:-60}
  policy:
    secure_only_models: ${SECURE_ONLY_MODELS:-bedrock,ollama}
    all_providers: ${ALL_PROVIDERS:-bedrock,ollama,openai,anthropic,grok}

# Summarizer Hub Configuration
summarizer_hub:
  port: 5060

# Prompt Store Configuration
prompt_store:
  port: 5110

# Interpreter Configuration
interpreter:
  port: ${INTERPRETER_PORT:-5120}

# CLI Configuration
cli:
  default_user: ${USER:-cli_user}

# Log Collector Configuration
log_collector:
  port: 5080
  retention_days: ${LOG_RETENTION_DAYS:-30}
  max_log_size_mb: ${MAX_LOG_SIZE_MB:-100}

# Notification Service Configuration
notification_service:
  port: 5095
  settings:
    deduplication_window: ${NOTIFICATION_DEDUPE_WINDOW:-300}
    max_retries: ${NOTIFICATION_MAX_RETRIES:-3}
    cache_ttl: ${NOTIFICATION_CACHE_TTL:-3600}
  owner_mapping:
    json_config: ${NOTIFY_OWNER_MAP_JSON:-}
    file_config: ${NOTIFY_OWNER_MAP_FILE:-}

# Source Agent Configuration
source_agent:
  port: 5000
  github_mcp_enabled: ${USE_GITHUB_MCP:-false}

# Bedrock Proxy Configuration
bedrock_proxy:
  port: 7090
  default_model: ${BEDROCK_DEFAULT_MODEL:-claude-3-sonnet-20240229-v1:0}
  default_region: ${BEDROCK_DEFAULT_REGION:-us-east-1}

# Discovery Agent Configuration
discovery_agent:
  port: 5045

# Frontend Configuration
frontend:
  port: 3000

# GitHub MCP Configuration
github_mcp:
  port: 5072
  toolsets: ${GITHUB_TOOLSETS:-repos}
  dynamic_toolsets: ${GITHUB_DYNAMIC_TOOLSETS:-false}
  read_only: ${GITHUB_READ_ONLY:-false}
  mock: ${GITHUB_MOCK:-true}

# ============================================================================
# GLOBAL SETTINGS
# ============================================================================

# Global Limits and Timeouts
limits:
  max_items: ${MAX_ITEMS:-1000}
  timeout: ${TIMEOUT:-30}
  max_connections: ${MAX_CONNECTIONS:-10}

# Logging Configuration
logging:
  level: ${LOG_LEVEL:-INFO}
  format: ${LOG_FORMAT:-json}

# Health Check Configuration
health:
  check_interval: ${HEALTH_CHECK_INTERVAL:-30}
  timeout: ${HEALTH_TIMEOUT:-10}

# Testing Configuration
testing: ${TESTING:-false}

# ============================================================================
# DOCKER COMPOSE PROFILES
# ============================================================================
# Define service groups for different deployment scenarios

profiles:
  # Core services (always running)
  core:
    - redis
    - orchestrator
    - doc_store
    - analysis-service
    - source-agent
    - frontend

  # Development services
  development:
    - summarizer-hub
    - memory-agent
    - discovery-agent

  # Production services
  production:
    - postgresql
    - log-collector
    - notification-service
    - secure-analyzer
    - code-analyzer

  # AI/ML services
  ai_services:
    - bedrock-proxy
    - github-mcp
    - interpreter
    - prompt-store

  # CLI and tooling
  tooling:
    - cli

# ============================================================================
# NETWORK CONFIGURATION
# ============================================================================

networks:
  # Development network
  doc_ecosystem_dev:
    driver: bridge
    name: doc-ecosystem-dev

  # Production network
  doc_ecosystem_prod:
    driver: bridge
    name: doc-ecosystem-prod

  # LLM services network
  llm_network:
    driver: bridge
    name: llm-network

# ============================================================================
# VOLUME CONFIGURATION
# ============================================================================

volumes:
  # Redis persistence
  redis_data:
    driver: local

  # Prompt store data
  prompt_store_data:
    driver: local

  # Document store data (optional)
  doc_store_data:
    driver: local

# ============================================================================
# DEPLOYMENT CONFIGURATION
# ============================================================================

deployment:
  # Docker image settings
  images:
    python_version: "3.12-slim"
    redis_version: "7-alpine"
    postgres_version: "15-alpine"

  # Health check settings (global)
  healthcheck:
    interval: 30s
    timeout: 10s
    retries: 3

  # Dependency conditions
  conditions:
    redis: service_healthy
    services: service_started

# ============================================================================
# MONITORING AND OBSERVABILITY
# ============================================================================

monitoring:
  enabled: ${MONITORING_ENABLED:-false}

  # Prometheus configuration
  prometheus:
    enabled: ${PROMETHEUS_ENABLED:-true}
    port: 9090
    scrape_interval: 15s
    evaluation_interval: 15s
    retention_days: 30

  # Grafana configuration
  grafana:
    enabled: ${GRAFANA_ENABLED:-true}
    port: 3001
    admin_password: ${GRAFANA_ADMIN_PASSWORD:-admin}
    dashboards_path: infrastructure/grafana/dashboards

  # Jaeger configuration
  jaeger:
    enabled: ${JAEGER_ENABLED:-true}
    ui_port: 16686
    collector_port: 14268
    retention_days: 7

  # Alertmanager configuration
  alertmanager:
    enabled: ${ALERTMANAGER_ENABLED:-true}
    port: 9093
    smtp_host: ${SMTP_HOST:-smtp.gmail.com}
    smtp_port: ${SMTP_PORT:-587}
    smtp_user: ${SMTP_USER:-}
    smtp_password: ${SMTP_PASSWORD:-}
    alert_email: ${ALERT_EMAIL:-alerts@llm-docs.com}

  # Node Exporter (system metrics)
  node_exporter:
    enabled: ${NODE_EXPORTER_ENABLED:-true}
    port: 9100

  # Pushgateway (batch job metrics)
  pushgateway:
    enabled: ${PUSHGATEWAY_ENABLED:-true}
    port: 9091

  # Optional ELK Stack
  elasticsearch:
    enabled: ${ELASTICSEARCH_ENABLED:-false}
    port: 9200
    password: ${ELASTIC_PASSWORD:-changeme}

  kibana:
    enabled: ${KIBANA_ENABLED:-false}
    port: 5601

# ============================================================================
# LOAD BALANCER CONFIGURATION
# ============================================================================

load_balancer:
  enabled: ${LOAD_BALANCER_ENABLED:-false}
  nginx:
    http_port: 80
    https_port: 443
    config_file: infrastructure/nginx.conf
    ssl_cert: infrastructure/ssl/cert.pem
    ssl_key: infrastructure/ssl/key.pem

# ============================================================================
# DEVELOPMENT SETTINGS
# ============================================================================

development:
  # Hot reload settings
  hot_reload: ${HOT_RELOAD:-true}

  # Debug settings
  debug: ${DEBUG:-true}
  debug_port: ${DEBUG_PORT:-5678}

  # Test settings
  pytest_timeout: 300
  coverage_enabled: ${COVERAGE_ENABLED:-true}

  # Local development overrides
  local_ollama: ${LOCAL_OLLAMA:-true}
  local_ollama_host: ${LOCAL_OLLAMA_HOST:-http://host.docker.internal:11434}

# ============================================================================
# PRODUCTION SETTINGS
# ============================================================================

production:
  # Security settings
  ssl_enabled: ${SSL_ENABLED:-true}
  secret_rotation_days: ${SECRET_ROTATION_DAYS:-90}

  # Performance settings
  connection_pool_size: ${CONNECTION_POOL_SIZE:-20}
  worker_processes: ${WORKER_PROCESSES:-4}

  # Backup settings
  backup_enabled: ${BACKUP_ENABLED:-true}
  backup_interval_hours: ${BACKUP_INTERVAL_HOURS:-24}

  # Monitoring settings
  metrics_enabled: ${METRICS_ENABLED:-true}
  tracing_enabled: ${TRACING_ENABLED:-true}

# ============================================================================
# ENVIRONMENT SPECIFIC OVERRIDES
# ============================================================================

# Environment-specific configurations
environments:
  development:
    redis:
      host: redis
    ollama:
      host: http://host.docker.internal:11434
    debug: true
    log_level: DEBUG

  staging:
    redis:
      host: redis-staging
    monitoring:
      enabled: true
    debug: false
    log_level: INFO

  production:
    redis:
      host: redis-cluster
    postgresql:
      enabled: true
    monitoring:
      enabled: true
    ssl_enabled: true
    debug: false
    log_level: WARNING
