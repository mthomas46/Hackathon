# ============================================================================
# Project Simulation Service - CI/CD Pipeline
# ============================================================================
# This GitHub Actions workflow provides complete CI/CD automation for the
# project-simulation service with testing, security scanning, and deployment.
# ============================================================================

name: Project Simulation CI/CD

on:
  push:
    branches: [ main, develop, simulation ]
    paths:
      - 'services/project-simulation/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop, simulation ]
    paths:
      - 'services/project-simulation/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/project-simulation
  SERVICE_NAME: project-simulation
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================================
  # Security Scanning Job
  # ============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './services/project-simulation'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Code Quality & Testing Job
  # ============================================================================
  test:
    name: 🧪 Test & Quality
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        python-version: ['3.11']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('services/project-simulation/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        working-directory: services/project-simulation
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist coverage black isort flake8 mypy

      - name: 🔍 Run code quality checks
        working-directory: services/project-simulation
        run: |
          # Code formatting
          black --check --diff .
          isort --check-only --diff .

          # Linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

          # Type checking
          mypy . --ignore-missing-imports

      - name: 🧪 Run unit tests
        working-directory: services/project-simulation
        run: |
          pytest tests/domain/ -v --cov=simulation.domain --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: 🧪 Run integration tests
        working-directory: services/project-simulation
        run: |
          pytest tests/integration/ -v --cov=simulation.infrastructure --cov-report=xml --cov-append
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: 🧪 Run functional tests
        working-directory: services/project-simulation
        run: |
          pytest tests/functional/ -v --cov=simulation --cov-report=xml --cov-append
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./services/project-simulation/coverage.xml
          flags: project-simulation
          name: project-simulation-coverage
          fail_ci_if_error: false

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            services/project-simulation/htmlcov/
            services/project-simulation/.coverage
          retention-days: 30

  # ============================================================================
  # Docker Build & Push Job
  # ============================================================================
  build:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/project-simulation
          file: ./services/project-simulation/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # ============================================================================
  # Performance Testing Job
  # ============================================================================
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Run performance tests
        run: |
          echo "🚀 Running performance tests..."
          # Add performance testing commands here
          # This would include load testing, memory profiling, etc.

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  # ============================================================================
  # Deploy to Staging Job
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
          # Add deployment commands for staging environment
          # This could include updating docker-compose, kubernetes manifests, etc.

  # ============================================================================
  # Deploy to Production Job
  # ============================================================================
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🎯 Deploy to production environment
        run: |
          echo "🎯 Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # Add deployment commands for production environment
          # This should include proper rollout strategies, health checks, etc.

  # ============================================================================
  # Rollback Job (Manual Trigger)
  # ============================================================================
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔄 Rollback deployment
        run: |
          echo "🔄 Rolling back deployment..."
          # Add rollback commands here
          # This should revert to the previous working version

  # ============================================================================
  # Notification Job
  # ============================================================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
      - name: 📢 Send notification
        run: |
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ All checks passed! Ready for deployment."
          else
            echo "❌ Some checks failed. Please review the pipeline."
          fi

      - name: 📧 Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            *Project Simulation CI/CD Pipeline*
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Build: ${{ github.run_number }}

            Test Result: ${{ needs.test.result }}
            Build Result: ${{ needs.build.result }}

            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != null

# ============================================================================
# Environment Protection Rules
# ============================================================================
# Require manual approval for production deployments
# environments:
#   production:
#     environment: production
#   staging:
#     environment: staging
