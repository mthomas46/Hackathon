# Docker Management Makefile
# Includes standardized port management and service orchestration

PYTHON ?= python3
VENV ?= venv_hardening

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

.PHONY: help validate-ports generate-configs docker-clean docker-reset

# Default target
help:
	@echo "🐳 Docker Management Commands"
	@echo "=============================="
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(BLUE)%-25s$(NC) %s\n", $$1, $$2}'

# Configuration Management
validate-ports: ## Check for port conflicts and configuration issues
	@echo "$(BLUE)🔍 Validating port configurations...$(NC)"
	source $(VENV)/bin/activate && python3 scripts/hardening/docker_standardization.py

generate-configs: ## Generate standardized configuration files
	@echo "$(BLUE)⚙️ Generating standardized configurations...$(NC)"
	source $(VENV)/bin/activate && python3 scripts/hardening/docker_standardization.py

docker-config: ## Validate docker-compose configuration
	@echo "$(BLUE)✅ Validating Docker Compose configuration...$(NC)"
	@docker-compose -f docker-compose.dev.yml config --quiet
	@echo "$(GREEN)✅ Configuration is valid!$(NC)"

# Service Management
start-all: validate-ports ## Start all services with validation
	@echo "$(BLUE)🚀 Starting all services...$(NC)"
	@docker-compose -f docker-compose.dev.yml --profile ai_services --profile development --profile production --profile core up -d
	@echo "$(GREEN)✅ Services starting...$(NC)"

start-core: ## Start core infrastructure services
	@echo "$(BLUE)🏗️ Starting core services...$(NC)"
	@docker-compose -f docker-compose.dev.yml --profile core up -d
	@echo "$(GREEN)✅ Core services started$(NC)"

start-ai: ## Start AI/ML services
	@echo "$(BLUE)🤖 Starting AI services...$(NC)"
	@docker-compose -f docker-compose.dev.yml --profile ai_services up -d
	@echo "$(GREEN)✅ AI services started$(NC)"

stop-all: ## Stop all services
	@echo "$(BLUE)🛑 Stopping all services...$(NC)"
	@docker-compose -f docker-compose.dev.yml down
	@echo "$(GREEN)✅ Services stopped$(NC)"

restart-all: stop-all start-all ## Restart all services

# Monitoring and Status
status: ## Show status of all services
	@echo "$(BLUE)📊 Service Status$(NC)"
	@docker ps --filter "name=hackathon" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -20

logs-all: ## Show logs for all services
	@echo "$(BLUE)📝 Service Logs$(NC)"
	@docker-compose -f docker-compose.dev.yml logs --tail=50

health-check: ## Check health of all services using unified monitoring
	@echo "$(BLUE)🏥 Health Check Results$(NC)"
	source $(VENV)/bin/activate && python3 scripts/safeguards/unified_health_monitor.py

# Maintenance
docker-clean:
	@echo "🧹 Cleaning up Docker resources..."
	@docker container prune -f
	@docker image prune -f
	@docker volume prune -f
	@docker network prune -f

docker-reset: stop-all docker-clean
	@echo "🔄 Resetting Docker environment..."
	@docker-compose -f docker-compose.dev.yml down --volumes --remove-orphans
	@docker system prune -a -f

# Development helpers
dev-setup: generate-configs validate-ports start-core
	@echo "💻 Development environment setup complete!"

quick-start: validate-ports start-core start-ai
	@echo "⚡ Quick start complete - core and AI services running!"

# Testing
test-ecosystem: start-all
	@echo "🧪 Testing ecosystem connectivity..."
	@sleep 10
	@scripts/docker/test-connectivity.sh

# Port and service information
port-info:
	@echo "📋 Port Assignments:"
	@python3 -c "import yaml; config=yaml.safe_load(open('config/service-ports.yaml')); [print(f'{cat}: {list(services.keys())}') for cat, services in config.items() if isinstance(services, dict) and 'port' in str(services)]"

service-info:
	@echo "🔍 Service Information:"
	@docker-compose -f docker-compose.dev.yml ps

# CI/CD Integration
ci-validate: validate-ports docker-config
	@echo "✅ CI validation passed!"

ci-test: ci-validate test-ecosystem
	@echo "✅ CI testing passed!"
