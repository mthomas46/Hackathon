# Monitoring and Alerting Makefile
# Proactive monitoring based on lessons learned from service failures

PYTHON ?= python3
VENV ?= venv_hardening

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

.PHONY: help status health alerts logs metrics performance security watch

help: ## Show monitoring commands
	@echo "$(BLUE)üìä Monitoring and Alerting Commands$(NC)"
	@echo "======================================"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(BLUE)%-20s$(NC) %s\n", $$1, $$2}'

# ========================================
# STATUS AND HEALTH
# ========================================

status: ## Show comprehensive ecosystem status
	@echo "$(BLUE)üìä Ecosystem Status$(NC)"
	@echo "=================="
	@echo ""
	docker ps --filter "name=hackathon" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "$(BLUE)Health Summary:$(NC)"
	@echo "‚Ä¢ Total: $$(docker ps --filter 'name=hackathon' | wc -l | tr -d ' ')"
	@echo "‚Ä¢ Healthy: $$(docker ps --filter 'name=hackathon' --format '{{.Status}}' | grep -c 'healthy' || echo '0')"
	@echo "‚Ä¢ Running: $$(docker ps --filter 'name=hackathon' --format '{{.Status}}' | grep -c 'Up' || echo '0')"

health: ## Run comprehensive health check
	@echo "$(BLUE)üè• Running Health Checks...$(NC)"
	source $(VENV)/bin/activate && python3 scripts/safeguards/unified_health_monitor.py

health-continuous: ## Continuous health monitoring (Ctrl+C to stop)
	@echo "$(BLUE)üì° Continuous Health Monitoring$(NC)"
	@echo "Press Ctrl+C to stop"
	@while true; do \
		clear; \
		echo "$(BLUE)üè• Health Status - $$(date)$(NC)"; \
		echo "================================"; \
		source $(VENV)/bin/activate && python3 scripts/safeguards/unified_health_monitor.py --quiet; \
		echo ""; \
		echo "Next check in 30 seconds..."; \
		sleep 30; \
	done

# ========================================
# ALERTING
# ========================================

alerts: ## Check for critical alerts and issues
	@echo "$(BLUE)üö® Checking Alerts...$(NC)"
	source $(VENV)/bin/activate && python3 scripts/safeguards/unified_health_monitor.py --alerts
	@echo ""
	@echo "$(BLUE)Recent Errors:$(NC)"
	@docker ps --filter "name=hackathon" --format "{{.Names}}" | while read container; do \
		error_count=$$(docker logs $$container --since 5m 2>&1 | grep -i error | wc -l | tr -d ' '); \
		if [ "$$error_count" -gt 0 ]; then \
			echo "‚Ä¢ $$container: $$error_count errors in last 5 minutes"; \
		fi \
	done

alerts-critical: ## Show only critical alerts
	@echo "$(RED)üö® CRITICAL ALERTS$(NC)"
	@echo "=================="
	@docker ps --filter "name=hackathon" --filter "status=exited" --format "{{.Names}}" | while read container; do \
		echo "‚ùå $$container has exited"; \
	done
	@docker ps --filter "name=hackathon" --format "{{.Names}}" | while read container; do \
		if ! docker exec $$container curl -f http://localhost:3000/health > /dev/null 2>&1; then \
			echo "‚ùå $$container health check failing"; \
		fi \
	done

# ========================================
# LOGS AND DIAGNOSTICS
# ========================================

logs: ## Show recent logs from all services
	@echo "$(BLUE)üìù Recent Service Logs$(NC)"
	docker-compose -f docker-compose.dev.yml logs --tail=20

logs-errors: ## Show only error logs from all services
	@echo "$(RED)üö® Error Logs from All Services$(NC)"
	@echo "================================="
	docker ps --filter "name=hackathon" --format "{{.Names}}" | while read container; do \
		echo ""; \
		echo "$(RED)$$container:$(NC)"; \
		docker logs $$container --tail 10 2>&1 | grep -i error || echo "  No recent errors"; \
	done

logs-service: ## Show logs for specific service (usage: make logs-service SERVICE=name)
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)Error: SERVICE parameter required$(NC)"; \
		echo "Usage: make logs-service SERVICE=doc_store"; \
		exit 1; \
	fi
	@echo "$(BLUE)üìù Logs for $(SERVICE)$(NC)"
	docker-compose -f docker-compose.dev.yml logs $(SERVICE) --tail=50

# ========================================
# METRICS AND PERFORMANCE
# ========================================

metrics: ## Collect and display performance metrics
	@echo "$(BLUE)üìä Performance Metrics$(NC)"
	@echo "======================"
	@echo ""
	@echo "$(BLUE)Container Resources:$(NC)"
	docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
	@echo ""
	@echo "$(BLUE)Network Connections:$(NC)"
	@netstat -tlnp 2>/dev/null | grep -E "(3000|5[0-9]{3}|81[0-9]{2})" | head -10

performance: ## Run performance analysis
	@echo "$(BLUE)‚ö° Performance Analysis$(NC)"
	source $(VENV)/bin/activate && python3 scripts/safeguards/unified_health_monitor.py --performance

performance-baseline: ## Establish performance baseline
	@echo "$(BLUE)üìà Establishing Performance Baseline...$(NC)"
	source $(VENV)/bin/activate && python3 scripts/safeguards/unified_health_monitor.py --baseline
	@echo "$(GREEN)‚úÖ Baseline established$(NC)"

# ========================================
# SECURITY MONITORING
# ========================================

security: ## Run security checks
	@echo "$(BLUE)üîí Security Monitoring$(NC)"
	@echo "===================="
	@echo ""
	@echo "$(BLUE)Vulnerability Scan:$(NC)"
	@docker ps --filter "name=hackathon" --format "{{.Image}}" | sort | uniq | while read image; do \
		echo "‚Ä¢ Scanning $$image..."; \
		docker scan $$image --json 2>/dev/null | jq -r '.vulnerabilities | keys[]' 2>/dev/null | wc -l | xargs echo "  Vulnerabilities found: " || echo "  Scan failed"; \
	done

security-ports: ## Check for exposed insecure ports
	@echo "$(BLUE)üîç Checking Port Security$(NC)"
	@docker ps --filter "name=hackathon" --format "{{.Names}}\t{{.Ports}}" | while read line; do \
		if echo "$$line" | grep -q "0.0.0.0:"; then \
			echo "‚ö†Ô∏è  $$line (exposed to all interfaces)"; \
		fi \
	done

# ========================================
# CONTINUOUS MONITORING
# ========================================

watch: ## Watch mode - continuous monitoring dashboard
	@echo "$(BLUE)üëÅÔ∏è  Watch Mode - Continuous Monitoring$(NC)"
	@echo "Press Ctrl+C to stop"
	@while true; do \
		clear; \
		echo "$(BLUE)üìä Live Ecosystem Dashboard - $$(date)$(NC)"; \
		echo "======================================="; \
		make status --silent; \
		echo ""; \
		echo "$(BLUE)Recent Alerts:$(NC)"; \
		make alerts-critical --silent | head -5; \
		echo ""; \
		echo "$(BLUE)Resource Usage:$(NC)"; \
		docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}" | head -6; \
		echo ""; \
		echo "Refreshing in 10 seconds... (Ctrl+C to stop)"; \
		sleep 10; \
	done

watch-health: ## Watch health status only
	@echo "$(BLUE)üè• Health Watch Mode$(NC)"
	@echo "Press Ctrl+C to stop"
	@while true; do \
		clear; \
		echo "$(BLUE)üè• Health Status - $$(date)$(NC)"; \
		make health --silent; \
		sleep 15; \
	done

# ========================================
# REPORTING
# ========================================

report: ## Generate monitoring report
	@echo "$(BLUE)üìã Generating Monitoring Report...$(NC)"
	@echo "Monitoring Report - $$(date)" > monitoring_report.txt
	@echo "==================" >> monitoring_report.txt
	@echo "" >> monitoring_report.txt
	@echo "=== HEALTH STATUS ===" >> monitoring_report.txt
	@make status >> monitoring_report.txt 2>&1
	@echo "" >> monitoring_report.txt
	@echo "=== ALERTS ===" >> monitoring_report.txt
	@make alerts >> monitoring_report.txt 2>&1
	@echo "" >> monitoring_report.txt
	@echo "=== PERFORMANCE ===" >> monitoring_report.txt
	@make metrics >> monitoring_report.txt 2>&1
	@echo "$(GREEN)‚úÖ Report generated: monitoring_report.txt$(NC)"

# ========================================
# NOTIFICATIONS (if configured)
# ========================================

notify-critical: ## Send notification for critical alerts
	@echo "$(BLUE)üì¢ Sending Critical Alert Notification...$(NC)"
	@critical_count=$$(make alerts-critical --silent | grep -c "‚ùå"); \
	if [ "$$critical_count" -gt 0 ]; then \
		echo "üö® $$critical_count critical issues detected"; \
		# Add webhook notification here if configured \
	else \
		echo "‚úÖ No critical issues"; \
	fi

# Default target
.DEFAULT_GOAL := help
